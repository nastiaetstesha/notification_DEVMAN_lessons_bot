import requests
import time
import logging
import telegram
import os

from dotenv import load_dotenv
from telegram.ext import Updater, CommandHandler
from utils import start, help_command, listen_reviews


# def listen_reviews():
#     logger.info("üì° –ó–∞–ø—É—â–µ–Ω–æ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ Devman...")
#     url = "https://dvmn.org/api/long_polling/"
#     headers = {"Authorization": f"Token {dvmn_token}"}
#     params = {}

#     while True:
#         try:
#             response = requests.get(
#                 url,
#                 headers=headers,
#                 params=params,
#                 timeout=90
#                 )
#             response.raise_for_status()
#             logger.info("üîç –°–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ API dvmn.org")
#             review = response.json()

#             if review["status"] == "timeout":
#                 params["timestamp"] = review["timestamp_to_request"]
#                 logger.info("‚è≥ –¢–∞–π–º–∞—É—Ç: –Ω–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç, –∂–¥—É –¥–∞–ª—å—à–µ...")
#                 continue

#             if review["status"] == "found":
#                 params["timestamp"] = review["last_attempt_timestamp"]
#                 for attempt in review["new_attempts"]:
#                     lesson_title = attempt["lesson_title"]
#                     is_negative = attempt["is_negative"]

#                     message = (
#                         f"üìù –£ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ä–∞–±–æ—Ç—É ¬´{lesson_title}¬ª.\n"
#                         f"{'‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–ª–∏—Å—å –æ—à–∏–±–∫–∏.'
#                            if is_negative
#                            else '‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, '
#                            '–º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É!'}"
#                     )
#                     bot.send_message(chat_id=chat_id, text=message)

#         except requests.exceptions.ReadTimeout:
#             logging.warning(
#                 "‚ö†Ô∏è ReadTimeout: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞..."
#                 )
#             continue
#         except requests.exceptions.ConnectionError:
#             logging.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ñ–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
#             time.sleep(30)
#         except Exception as e:
#             logging.exception("üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:")
#             time.sleep(30)


if __name__ == "__main__":
    load_dotenv()

    dvmn_token = os.getenv("DVMN_TOKEN")
    tg_token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")

    bot = telegram.Bot(token=tg_token)

    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    updater = Updater(tg_token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))

    updater.start_polling()
    logger.info("–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã Telegram")

    listen_reviews(dvmn_token, bot, chat_id)


